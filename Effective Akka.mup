{
  "title": "Effective Akka",
  "id": 1,
  "formatVersion": 2,
  "ideas": {
    "1": {
      "title": "Actor application types",
      "id": 2,
      "ideas": {
        "1": {
          "title": "Domain-driven",
          "id": 3,
          "ideas": {
            "1": {
              "title": "Actors live and die only to represent the state of the domain",
              "id": 4,
              "ideas": {
                "1": {
                  "title": "Respond to external events and morph to meet changes in the modelled world",
                  "id": 13
                },
                "2": {
                  "title": "Domain-driven messages are \"facts\".",
                  "id": 14
                }
              }
            },
            "2": {
              "title": "Frequently used when information is provided to multiple other servers in an eventually consistent manner",
              "id": 5
            },
            "3": {
              "title": "Due to their light weight, actors allow  live real-time domain modelling",
              "id": 6,
              "ideas": {
                "1": {
                  "title": "Each actor in itself constitutes a 400B heap space footprint",
                  "id": 8
                }
              }
            },
            "4": {
              "title": "Fault tolerance of actors is beneficial",
              "id": 9,
              "ideas": {
                "1": {
                  "title": "The hierarchy has to be appropriately nested",
                  "id": 10
                },
                "2": {
                  "title": "Well-defined regions of handling specific errors",
                  "id": 11
                }
              }
            }
          },
          "attr": {
            "collapsed": true,
            "style": {}
          }
        },
        "2": {
          "title": "Work distribution",
          "id": 15,
          "ideas": {
            "1": {
              "title": "Actors are stateless",
              "id": 16,
              "ideas": {
                "1": {
                  "title": "Messages contain state",
                  "id": 18
                },
                "2": {
                  "title": "An actor performs some operations on received state and responds with a new instance of the changed state",
                  "id": 19
                }
              },
              "attr": {
                "collapsed": true,
                "style": {}
              }
            },
            "2": {
              "title": "Actors are workers",
              "id": 21,
              "ideas": {
                "1": {
                  "title": "They are meant for parallelization or separation of dangerous tasks",
                  "id": 22
                },
                "2": {
                  "title": "Data to act upon is always provided to them",
                  "id": 23
                }
              },
              "attr": {
                "collapsed": true,
                "style": {}
              }
            },
            "3": {
              "title": "Routers and routees",
              "id": 24,
              "ideas": {
                "1": {
                  "title": "Multiple instances of one actor type",
                  "id": 25,
                  "ideas": {
                    "1": {
                      "title": "Work is being distributed amongst the instances",
                      "id": 26
                    }
                  }
                },
                "2": {
                  "title": "Routing strategies",
                  "id": 27,
                  "ideas": {
                    "1": {
                      "title": "Random",
                      "id": 28,
                      "ideas": {
                        "1": {
                          "title": "No specific guarantees of work distribution",
                          "id": 31
                        }
                      }
                    },
                    "2": {
                      "title": "Round robin",
                      "id": 29,
                      "ideas": {
                        "1": {
                          "title": "Even work distirbution",
                          "id": 30
                        }
                      }
                    },
                    "3": {
                      "title": "Smallest mailbox",
                      "id": 32,
                      "ideas": {
                        "1": {
                          "title": "This is not the best solution",
                          "id": 33
                        },
                        "2": {
                          "title": "The actor having the smallest mailbox may be the one who takes the longest to process messages",
                          "id": 34
                        },
                        "3": {
                          "title": "Useful for routees that handle the exact same work of blocking nature",
                          "id": 35,
                          "ideas": {
                            "1": {
                              "title": "Example: I/O bound operations with varying latencies",
                              "id": 36
                            }
                          }
                        },
                        "4": {
                          "title": "This strategy does not work for remote actors",
                          "id": 37,
                          "ideas": {
                            "1": {
                              "title": "Remote actor mailbox size is not known",
                              "id": 38
                            }
                          }
                        }
                      },
                      "attr": {
                        "collapsed": true,
                        "style": {}
                      }
                    },
                    "4": {
                      "title": "Broadcast",
                      "id": 39,
                      "ideas": {
                        "1": {
                          "title": "USeful for distributiong work to multiple nodes handling different tasks",
                          "id": 40,
                          "ideas": {
                            "1": {
                              "title": "In case an error occurs, other actors may perform the work correctly",
                              "id": 41
                            }
                          }
                        },
                        "2": {
                          "title": "Theoretically, mailboxes of the actors should be of equal size",
                          "id": 42,
                          "ideas": {
                            "1": {
                              "title": "In practice, this depends on the dispatcher fairness",
                              "id": 43
                            }
                          }
                        },
                        "3": {
                          "title": "Dispatchers",
                          "id": 44,
                          "ideas": {
                            "1": {
                              "title": "ScaterGatherFirstCompletedOf",
                              "id": 45,
                              "ideas": {
                                "1": {
                                  "title": "Useful for when resources are not a problem and the work has to be done as fast as possible",
                                  "id": 46
                                }
                              }
                            },
                            "2": {
                              "title": "Consistent hash routing",
                              "id": 47,
                              "ideas": {
                                "1": {
                                  "title": "Useful for when specific tasks should always go to concrete actors",
                                  "id": 48
                                }
                              }
                            },
                            "3": {
                              "title": "BalancingDispatcher is deprecated",
                              "id": 51
                            }
                          },
                          "attr": {
                            "collapsed": true,
                            "style": {}
                          }
                        }
                      }
                    }
                  }
                }
              },
              "attr": {
                "style": {},
                "collapsed": true
              }
            },
            "4": {
              "title": "Messages are \"commands\"",
              "id": 52
            }
          },
          "attr": {
            "style": {},
            "collapsed": true
          }
        }
      },
      "attr": {
        "collapsed": true,
        "style": {}
      }
    },
    "11": {
      "title": "Actor usage patterns",
      "id": 53,
      "ideas": {
        "1": {
          "title": "Extra",
          "id": 54,
          "ideas": {
            "1": {
              "title": "Capture context in anonymous actor instances",
              "id": 55,
              "attr": {
                "attachment": {
                  "contentType": "text/html",
                  "content": "<div><font face=\"Courier New\">/* imports.... */</font></div><div><font face=\"Courier New\">import scala.concurrent.ExecutionContext</font></div><div><font face=\"Courier New\">import scala.concurrent.duration._</font></div><div><font face=\"Courier New\">import org.jamieallen.effectiveakka.common._</font></div><div><font face=\"Courier New\">import akka.actor.{Actor, ActorRef, Props, ActorLogging }</font></div><div><font face=\"Courier New\">import akka.actor.LoggingReceive</font></div><div><font face=\"Courier New\"><br></font></div><font face=\"Courier New\">object AccountBalanceRetriever {</font><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><font face=\"Courier New\">case object ACcountRetrievalTimeout</font></div></blockquote><div><div><font face=\"Courier New\">}</font></div></div><div><font face=\"Courier New\"><br></font></div><div><font face=\"Courier New\">class AccountBalanceRetriever (savingsAccounts: ActorRef,&nbsp;</font><span style=\"font-family: 'Courier New';\">checkingAccounts: ActorRef,</span><span style=\"font-family: 'Courier New';\">&nbsp;moneyMarket</span><span style=\"font-family: 'Courier New';\">Accounts: ActorRef)</span></div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><span style=\"font-family: 'Courier New';\">extends Actor with ActorLogging {</span></div></blockquote></blockquote></blockquote></blockquote><font face=\"Courier New\">import AccountBalanceRetriever._</font></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><font face=\"Courier New\"><br></font></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><font face=\"Courier New\">def receive = {</font></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><font face=\"Courier New\">case GetCustomerAccountBalances(id) =&gt; {</font></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><font face=\"Courier New\">log.debug(s\"Received&nbsp;</font><span style=\"font-family: 'Courier New';\">GetCustomerAccountBalances for $id from $sender\")</span></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><span style=\"font-family: 'Courier New';\">val originalSender = sender // important pattern!</span></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><span style=\"font-family: 'Courier New';\"><br></span></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><span style=\"font-family: 'Courier New';\">context.actorOf(Props(new Actor() {</span></blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><font face=\"Courier New\">val checkoingBalances, savingsBalances, mmBalances: Option[List[(Long, BigDecimal)]] = None</font></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><font face=\"Courier New\"><br></font></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><font face=\"Courier New\">def receive = {</font></blockquote></blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><font face=\"Courier New\">case CheckingAccountBalances(balances) =&gt; {</font></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><font face=\"Courier New\">checkingBalances = balances</font></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><font face=\"Courier New\">collectBalances</font></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><font face=\"Courier New\">}</font></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><font face=\"Courier New\"><br></font></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><font face=\"Courier New\">case SavingsAccountBalances(balances) =&gt; {</font></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><font face=\"Courier New\">savingsBalances = balances</font></blockquote><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><font face=\"Courier New\">collectBalances</font></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><font face=\"Courier New\">}</font></blockquote></blockquote></blockquote></blockquote></blockquote><font face=\"Courier New\"><div><font face=\"Courier New\"><br></font></div></font><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><font face=\"Courier New\">case MoneyMArketAccountBalances(balances) =&gt; {</font></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><font face=\"Courier New\">mmBalances = balances</font></blockquote><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><font face=\"Courier New\">collectBalances</font></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><font face=\"Courier New\">}</font></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><br></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><font face=\"Courier New\">case AccountRetrievalTimeout =&gt;</font></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><font face=\"Courier New\">sendResponseAndShutdown(AccountRetrievalTimeout)</font></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><font face=\"Courier New\">}</font></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><font face=\"Courier New\"><br></font></blockquote></blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><font face=\"Courier New\">def collectBalances = (checkingBalances, savingsBalances, mmBalances) match {</font></blockquote></blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><font face=\"Courier New\">case (Some(c), Some(s), Some(m)) =&gt;&nbsp;</font></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><font face=\"Courier New\">timeoutMessager.cancel</font></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><font face=\"Courier New\">sendResponseAndShutdown(AccountBalances(checkingBalances, savingsBalances, mmBalances))</font></blockquote><font face=\"Courier New\">c ase _ =&gt;&nbsp;</font></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><font face=\"Courier New\">}</font></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><font face=\"Courier New\"><br></font></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><font face=\"Courier New\">def sendResponseAndShutdown(response: Any) = {</font></blockquote></blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><font face=\"Courier New\">originalSender ! response</font></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><span style=\"font-family: 'Courier New';\">context.stop(self) // or self ! PoisonPill</span></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><font face=\"Courier New\">}</font></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><font face=\"Courier New\"><br></font></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><font face=\"Courier New\">savingsAccounts ! GetCustomerAccountBalances(id)</font></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><span style=\"font-family: 'Courier New';\">checkingAccounts ! GetCustomerAccountBalances(id)</span><font face=\"Courier New\"><br></font></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><span style=\"font-family: 'Courier New';\">moneyMarketAccounts ! GetCustomerAccountBalances(id)</span><span style=\"font-family: 'Courier New';\"><br></span></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><span style=\"font-family: 'Courier New';\"><br></span></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><span style=\"font-family: 'Courier New';\">import context.dispatcher</span></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><span style=\"font-family: 'Courier New';\"><br></span></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><span style=\"font-family: 'Courier New';\">val timeoutMessager = context.system.scheduler.scheduleOnce(250 milliseconds) {</span></blockquote></blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><span style=\"font-family: 'Courier New';\">self ! AccountRetrievalTimeout</span></blockquote></blockquote></blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><span style=\"font-family: 'Courier New';\">}</span></blockquote></blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><span style=\"font-family: 'Courier New';\">})</span></blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><font face=\"Courier New\">}</font></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><font face=\"Courier New\">}</font></blockquote><span style=\"font-family: 'Courier New';\">}</span>"
                },
                "style": {}
              }
            }
          }
        },
        "2": {
          "title": "Never pass futures between actors",
          "id": 56,
          "ideas": {
            "1": {
              "title": "A thread cannot be serialized",
              "id": 57
            }
          }
        },
        "3": {
          "title": "Cameo",
          "id": 58,
          "ideas": {
            "1": {
              "title": "Basically, this is the Extra pattern, but the actor is not anonymous",
              "id": 60,
              "ideas": {
                "1": {
                  "title": "Extra example migrated to Cameo",
                  "id": 65,
                  "attr": {
                    "attachment": {
                      "contentType": "text/html",
                      "content": "import scala.concurrent.ExecutionContext<div>import scala.concurrent.duration._</div><div>import org.jamieallen.efectiveakka.common._</div><div>import akka.actor._</div><div>import akka.event.LoggingReceive</div><div><br></div><div>object AccountBalanceResponseHandler {</div><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>case object AccountRetrievalTimeout</div><div><br></div><div>// Factory method for actor properties</div><div>def props(savingsAccount: ActorRef, checnkingAccounts: ActorRef, moneyMarketAccounts: ActorRef, originalSender: ActorRef): Props = {</div></blockquote></div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>Props(new AccountBalanceResponseHandler(sacingsAccounts, checkingAccounts, moneyMarketAccounts, originalSender))</div></blockquote></div></blockquote><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>}</div></blockquote></div><div>}</div><div><br></div><div>class AccountBalanceResponseHandler(savingsAccounts: ActorRef, checkingAccounts: ActorRef, moneyMarketAccounts: ActorRef, originalSender: ActorRef)</div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">extends Actor with ActorLogging {</blockquote></blockquote></blockquote></blockquote></blockquote></blockquote>import AccountBalanceResponseHandler._</blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">var checkingBalances, savingsBalances, mmBalances: Option[List[(Long, BigDecimal)]] = None</blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><br></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">def receive = LoggingReceive {</blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">case CheckingAccountBalances(balances) =&gt;</blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">// log.debug....</blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">checkingBalances = balances</blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">collectBalances</blockquote>case SavingsAccountBalances(balances) =&gt;</blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">// log.debug...</blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">savingsBalances = balances</blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">collectBalances</blockquote>case MoneyMarketAccountBalances(balances) =&gt;</blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">// log.debug...</blockquote></blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">mmBalances = balances</blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">collectBalances</blockquote>case AccountRetrievalTimeout =&gt;</blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">// log.debug...</blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">sendResponseAndShutdown(AccountRetrievalTimeout)</blockquote></blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"></blockquote></blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">}</blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><br></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">def collectBalances = (checkingBalances, savingsBalances, mmBalances) match {</blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">case (Some(c), Some(s), Some(m)) =&gt;</blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">// log.debug...</blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">timeoutMessager.cancel</blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">sendResponseAndShutdown(AccountBalances(checkingBalances, savingsBalances, mmBalances))</blockquote>case _ =&gt;</blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">}</blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><br></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">def sendResponseAndShutdown(response: Any) = {</blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">originalSender ! response</blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">// log.debug...</blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">context.stop(self) // or self ! PoisonPill</blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">}</blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><br></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">import context.dispatcher</blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">val timeoutMessages = context.system.scheduler.scheduleOnce(250 milliseconds) {</blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">self ! AccountRetrievalTimeout</blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">}</blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"></blockquote>}<div><br></div><div>class AccountBalanceRetriever(savingsAccounts: ActorRef, checkingAccounts: ActorRef, moneyMarketAccounts: ActorRef)</div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><div>extends Actor {</div></div></blockquote></blockquote></blockquote></blockquote>def receive = {</blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">case GetCustomerAccountBalances(id) =&gt;</blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">val originalSender = sender</blockquote></blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">val handler = context.ActorOf(AccountBalanceResponseHandler.props(savingsAccounts, checkingAccounts, moneyMarketAccounts), \"cameo-message-handler\") // explicit naming helps debug</blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">savingsAccounts.tell(GetCustomerAccountBalances(id), handler)</blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">checkingAccounts.tell(GetCustomerAccountBalances(id), handler)</blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">moneyMarketAccounts.tell(GetCustomerAccountBalances(id), handler)</blockquote></blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">}</blockquote>}<br><div><br><div><br></div><div><br></div></div>"
                    },
                    "style": {}
                  },
                  "ideas": {
                    "1": {
                      "title": "the tell method has to be used to pass an appropriate response handler",
                      "id": 66,
                      "ideas": {}
                    },
                    "2": {
                      "title": "The sender has to be saved into a local variable",
                      "id": 68,
                      "ideas": {
                        "1": {
                          "title": "It might get lost during message exchanges",
                          "id": 69
                        }
                      }
                    },
                    "3": {
                      "title": "The props factory method should not be used during tests",
                      "id": 70,
                      "ideas": {
                        "1": {
                          "title": "The instantiation of the Props instance for stubbed actors remains in the context of a test",
                          "id": 71
                        },
                        "2": {
                          "title": "There is no risk of closing over \"this\" from the test context",
                          "id": 72
                        }
                      }
                    }
                  }
                }
              }
            },
            "2": {
              "title": "Benefits of putting Extra actors into predefined types",
              "id": 62,
              "ideas": {
                "1": {
                  "title": "Separate details into a well-named context",
                  "id": 63
                },
                "2": {
                  "title": "Easier debugging -  failures happen in a  named context",
                  "id": 64
                }
              }
            }
          },
          "attr": {
            "collapsed": true,
            "style": {}
          }
        }
      },
      "attr": {
        "collapsed": true,
        "style": {}
      }
    },
    "21": {
      "title": "General good practices",
      "id": 73,
      "ideas": {
        "1": {
          "title": "Adhere to SRP",
          "id": 74,
          "ideas": {
            "1": {
              "title": "The simpler your acotrs are, the easier it is to compose a system of them",
              "id": 75
            },
            "2": {
              "title": "Much more flexibility",
              "id": 76
            }
          }
        },
        "2": {
          "title": "Create specific supervisors.",
          "id": 77,
          "ideas": {
            "1": {
              "title": "Especially when using the AlllForOne strategy, it is much more efficient to have granular supervision",
              "id": 78,
              "ideas": {
                "1": {
                  "title": "Having a flat supervision structure causes an unnecessarily large amount of actors to be restarted",
                  "id": 79
                }
              },
              "attr": {
                "collapsed": true,
                "style": {}
              }
            },
            "2": {
              "title": "Maintain small error kernels",
              "id": 80,
              "ideas": {
                "1": {
                  "title": "An error kernel is a piece of code that effectively cannot fail",
                  "id": 81
                },
                "2": {
                  "title": "Supervisors restart actors and make sure that the part of the system is running in spite of any errors",
                  "id": 82
                }
              },
              "attr": {
                "collapsed": true,
                "style": {}
              }
            },
            "3": {
              "title": "Failure zones",
              "id": 83,
              "ideas": {
                "1": {
                  "title": "Do not use the DefaultDispatcher eveywhere",
                  "id": 84
                },
                "2": {
                  "title": "Take into account  mechanical sympathy",
                  "id": 85,
                  "ideas": {
                    "1": {
                      "title": "What kinds of machines, with how many cores, will run the application?",
                      "id": 86
                    },
                    "2": {
                      "title": "How CPU-bound are the tasks performed by the actors?",
                      "id": 87
                    },
                    "3": {
                      "title": "How many threads can realistically be expected to run concurrently for this application on those machines?",
                      "id": 88
                    }
                  }
                }
              }
            }
          },
          "attr": {
            "collapsed": true,
            "style": {}
          }
        },
        "3": {
          "title": "Avoid blocking.",
          "id": 89,
          "ideas": {
            "1": {
              "title": "Blocking a thread allows the kernel to release it from its CPU core.",
              "id": 90,
              "ideas": {
                "1": {
                  "title": "This causes context switching.",
                  "id": 91
                },
                "2": {
                  "title": "Results in the loss of 'warmed' caches local to the core.",
                  "id": 92
                }
              },
              "attr": {
                "collapsed": true,
                "style": {}
              }
            },
            "2": {
              "title": "An actor handles only one message from its mailbox at a time, sequentially.",
              "id": 93,
              "ideas": {}
            },
            "3": {
              "title": "Perform behavior dictated by received messages in Futures.",
              "id": 94,
              "attr": {
                "attachment": {
                  "contentType": "text/html",
                  "content": "case object TransactionSuccess<div><br></div><div>class CustomerUpdater(dbDriver: DatabaseDriver) extends Actor {</div><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>def receive = {</div></blockquote></div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>case UpdateCustomer(customer) =&gt;</div></blockquote></div></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>val originalSender = sender</div><div>implicit val ec: ExecutionContext = ExecutionContext.fromExecutor(new ForkJoinPool())</div><div><br></div><div>val future = Future {</div></blockquote></div></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>// define JDBC action</div></blockquote></div></blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>}</div><div><br></div><div>future onComplete {</div></blockquote></div></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>case Failure(x) =&gt; throw new CustomerUpdateException(x)</div><div>case Success =&gt; originalSender ! TransactionSuccess()</div></blockquote></div></blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>}</div></blockquote></div></blockquote></blockquote><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>}</div></blockquote></div><div>}</div>"
                },
                "style": {},
                "collapsed": true
              },
              "ideas": {
                "1": {
                  "title": "The actors receives the requests, does the absolute minimum required to handle the message and delegates the work to a Future.",
                  "id": 95
                },
                "2": {
                  "title": "Also, a more specific exception type is created to pass onto the direct supervisor.",
                  "id": 96
                },
                "3": {
                  "title": "It's sensible to define a separate dispatcher for the futures.",
                  "id": 97,
                  "ideas": {
                    "1": {
                      "title": "Long-running or expensive tasks will not impact message handling as much.",
                      "id": 98
                    }
                  },
                  "attr": {
                    "collapsed": true,
                    "style": {}
                  }
                },
                "4": {
                  "title": "Parallelizing futures",
                  "id": 100,
                  "ideas": {
                    "1": {
                      "title": "Use a for comprehension containing only future types.",
                      "id": 101,
                      "attr": {
                        "attachment": {
                          "contentType": "text/html",
                          "content": "class SecurityPricingActor(exchange: Exchange, backOffice: BackOffice) extends Actor {<blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>def receive = {</div></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>case GetPricingInfo(security: Security) =&gt;</div></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>val originalSender = sender</div><div>val bidAndAskFuture = Future { exchange.getBidAndAsk(security.id) }</div><div>val lastPriceFuture = Future { backOffice.getLastPrice(security.id) }</div><div><br></div><div>val response : Future[SecurityPricing] = for {</div></blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">(bid, ask) = bidAndAskFuture &nbsp;// Future[(BigDecimal, BigDecimal)]</blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">lastPrice = lastPriceFuture // Future[BigDecimal]</blockquote></blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>} yield SecurityPricing(bid, ask, lastPrice)</div><div><br></div><div>response map (originalSender ! _)</div></blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>}</div></blockquote>}"
                        },
                        "style": {}
                      }
                    },
                    "2": {
                      "title": "Alternatively, zip can be used.",
                      "id": 102,
                      "attr": {
                        "attachment": {
                          "contentType": "text/html",
                          "content": "class SecurityPricingActor(exchange: Exchange, backOffice: BackOffice) extends Actor {<blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\">def receive = {</blockquote><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\">case GetPricingInfo(security: Security) =&gt;</blockquote></blockquote><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><div>val originalSender = sender</div><div>val bidAndAskFuture = Future { exchange.getBidAndAsk(security.id) }</div><div>val lastPriceFuture = Future { backOffice.getLastPrice(security.id) }</div><div><br></div><div>val response : Future[SecurityPricing] = for {</div></blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><div>((bid, ask), lastPrice) = Future {</div></blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><div>exchange.getBidAndAsk(security.id)</div></blockquote></blockquote></blockquote></blockquote><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><div>} zip Future {</div></blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><div>backOffice.getLastPrice(security.id)</div></blockquote></blockquote></blockquote></blockquote><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><div>}</div></blockquote>} yield SecurityPrice(bid, ask, lastPrice)</blockquote></blockquote></blockquote><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\"><div>response map (originalSender ! _)</div></blockquote></blockquote></blockquote><blockquote style=\"padding-left: 0px; margin-bottom: 0px; margin-left: 40px; border: none;\">}</blockquote>}"
                        },
                        "style": {}
                      }
                    }
                  },
                  "attr": {
                    "style": {}
                  }
                },
                "5": {
                  "title": "Sequential futures",
                  "id": 103,
                  "ideas": {
                    "1": {
                      "title": "Used in cases when the futures must be executed in particular order.",
                      "id": 104,
                      "attr": {
                        "attachment": {
                          "contentType": "text/html",
                          "content": "val accountsForCustomer : Iterable[(Customer, Account)] = for {<div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>customer &lt;- Future { databaseService.getCustomers }</div><div>account &lt;- Future { accountService.getAccounts(customer.id) }</div></blockquote><div>} yield (customer, account)</div></div>"
                        },
                        "style": {}
                      }
                    }
                  },
                  "attr": {
                    "style": {}
                  }
                },
                "6": {
                  "title": "Futures and ExecutionContext",
                  "id": 105,
                  "ideas": {
                    "1": {
                      "title": "ExecutionContext provides a thread pool from which Futures draw their required resources.",
                      "id": 106
                    },
                    "2": {
                      "title": "Using an ActorSystem's default dispatcher",
                      "id": 107,
                      "attr": {
                        "attachment": {
                          "contentType": "text/html",
                          "content": "val system &nbsp;= ActorSystem()<div>implicit val ec: ExecutionContext = system.dispatcher</div><div>Future { /* work, work... */ }</div>"
                        },
                        "style": {}
                      },
                      "ideas": {
                        "1": {
                          "title": "The default dispatcher can lead to thread starvation when overloaded with potential work.",
                          "id": 108
                        }
                      }
                    },
                    "3": {
                      "title": "It's important to isolate execution by context.",
                      "id": 109,
                      "ideas": {
                        "1": {
                          "title": "Reduces resource contention between unrelated tasks.",
                          "id": 110
                        }
                      },
                      "attr": {
                        "style": {}
                      }
                    },
                    "4": {
                      "title": "Using an Actor's dispatcher",
                      "id": 111,
                      "attr": {
                        "attachment": {
                          "contentType": "text/html",
                          "content": "implicit val ec: ExecutionContext = context.dispatcher<div>Future { /* work, work */ }</div>"
                        },
                        "style": {}
                      },
                      "ideas": {
                        "1": {
                          "title": "Provides more resource granularity.",
                          "id": 112
                        },
                        "2": {
                          "title": "Still requires an Actor to dedicate a thread each time a Future is instantiated.",
                          "id": 113
                        }
                      }
                    },
                    "5": {
                      "title": "Creating arbitrary dispatchers on demand",
                      "id": 114,
                      "attr": {
                        "attachment": {
                          "contentType": "text/html",
                          "content": "implicit val ec: ExecutionContext = ExecutionContext.fromExecutor(new ForkJoinPool())<div>Future { /* work, work... */ }</div>"
                        },
                        "style": {}
                      }
                    },
                    "6": {
                      "title": "A commendable practice is to create named dispatchers dedicated for specific groups of tasks delegated to Futures.",
                      "id": 116,
                      "ideas": {
                        "1": {
                          "title": "The dispatchers can then be looked up by name.",
                          "id": 118,
                          "attr": {
                            "attachment": {
                              "contentType": "text/html",
                              "content": "implicit val ec: ExecutionContext = context.system.dispatchers.lookup(\"transactionInterestCalculation\")"
                            },
                            "style": {}
                          }
                        },
                        "2": {
                          "title": "READ UP\nhow to create such dispatchers?",
                          "id": 119,
                          "attr": {
                            "style": {
                              "background": "#ff0000"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "4": {
              "title": "Push, don't pull.",
              "id": 120,
              "ideas": {
                "1": {
                  "title": "The ask pattern requires a future to send the message in the first place.",
                  "id": 121,
                  "ideas": {
                    "1": {
                      "title": "The handler for the the response is queued with the ExecutionContext.",
                      "id": 122
                    },
                    "2": {
                      "title": "Additionally, there is a timeout associated with it.",
                      "id": 123
                    },
                    "3": {
                      "title": "All of these combined are quite heavy for a simple actor interaction.",
                      "id": 124
                    }
                  },
                  "attr": {
                    "collapsed": true,
                    "style": {}
                  }
                },
                "2": {
                  "title": "It is better to fire and forget messages and be prepared to handle responses.",
                  "id": 125,
                  "attr": {
                    "attachment": {
                      "contentType": "text/html",
                      "content": "object MyActor {<div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">case class DataToHandle(bytes: Array[Byte])</blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\">case object GetData</blockquote><div>}</div></div><div><br></div><div>class MyActor(otherActor: ActorRef) extends Actor {</div><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>import MyActor._</div><div>import context.dispatcher</div><div><br></div><div>var cancellable: Option[Cancellable] = None</div><div>def receive = {</div></blockquote></div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>case Start =&gt;</div></blockquote></div></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>context.become(dataHandler) // push state onto stack</div><div>cancellable = Some(context.system.scheduler.schedule(0 milliseconds, 500 milliseconds, otherActor, GetData))</div></blockquote></div></blockquote></blockquote><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>}</div><div><br></div></blockquote></div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><div>def dataHandler: Receive = {</div></div></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>case DataToHandle(data) =&gt;</div></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>cancellable map (_.cancel)</div></blockquote></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>context.unbecome // pop state from stack</div></blockquote></blockquote></blockquote><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>}</div></blockquote></div><div>}</div>"
                    },
                    "style": {}
                  },
                  "ideas": {
                    "1": {
                      "title": "Receive messages can be chained.",
                      "id": 126,
                      "ideas": {
                        "1": {
                          "title": "An actor is allowed to register receive blocks and handle the messages received in an ordered fashion.",
                          "id": 127,
                          "ideas": {
                            "1": {
                              "title": "The used traits are linearized.",
                              "id": 128
                            }
                          }
                        }
                      },
                      "attr": {
                        "attachment": {
                          "contentType": "text/html",
                          "content": "trait ChainingActor extends Actor {<div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>private var chainedReceives: List[Receive] = List()</div><div><br></div><div>def registerReceive(newReceive: Receive) {</div></blockquote></div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>chainedReceived = newReceive :: chainedReceives</div></blockquote></div></blockquote><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>}</div><div><br></div><div>def receive = chainedReceives reduce (_ orElse _)</div></blockquote><div>}</div></div><div><br></div><div>trait IntActor extends ChainingActor {</div><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>registerReceive {</div></blockquote></div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>case i: Int =&gt; println(\"int!\")</div></blockquote></div></blockquote><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>}</div></blockquote></div><div>}</div><div><br></div><div>trait StringActor extends ChainingActor {</div><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>registerReceive {</div></blockquote></div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>case s: String =&gt; println(\"string!\")</div></blockquote></div></blockquote><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>}</div></blockquote></div><div>}</div>"
                        },
                        "style": {}
                      }
                    },
                    "2": {
                      "title": "It does not really matter in a real-world system that the actor does not handle consecutive DataToHandle messages.",
                      "id": 129,
                      "ideas": {
                        "1": {
                          "title": "Messages should be sent multiple times until a response is received or some timeout occurs.",
                          "id": 130
                        },
                        "2": {
                          "title": "In effect, the actor should handle only one of the many messages anyway.",
                          "id": 131,
                          "attr": {
                            "style": {}
                          }
                        }
                      }
                    }
                  }
                }
              },
              "attr": {
                "style": {},
                "collapsed": true
              }
            },
            "5": {
              "title": "When you have to block",
              "id": 132,
              "ideas": {
                "1": {
                  "title": "E.g. when having an actor talk to a legacy, blocking database driver.",
                  "id": 133
                },
                "2": {
                  "title": "Limit the effect of the blocking call.",
                  "id": 134,
                  "ideas": {
                    "1": {
                      "title": "Put an actor with blocking calls inside its own dispatcher.",
                      "id": 135,
                      "ideas": {
                        "1": {
                          "title": "Its resources should not be shared by any other actors performing non-blocking work.",
                          "id": 136
                        }
                      },
                      "attr": {
                        "attachment": {
                          "contentType": "text/html",
                          "content": "<div>// The context here is of an actor that will create the blocking actor.</div>val customerRetriever = context.actorOf(Props[CustomerRetrievalActor].withDispatcher(\"customer-retrieval-dispatcher\"), \"customer-retriever\")<div><br></div><div>class CustomerRetrievalActor extends Actor {</div><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>def receive = {</div></blockquote></div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>case GetCustomer(id) =&gt;</div></blockquote></div></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>// Make a database call</div></blockquote></div></blockquote></blockquote><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>}</div></blockquote></div><div>}</div>"
                        },
                        "style": {}
                      }
                    }
                  }
                },
                "3": {
                  "title": "Managed blocking",
                  "id": 137,
                  "ideas": {
                    "1": {
                      "title": "The thread pool is notified that the wrapped task is blocking or long-running.",
                      "id": 139,
                      "ideas": {
                        "1": {
                          "title": "It can adjust the amount of threads elastically to make sure nobody is starved.",
                          "id": 140
                        }
                      }
                    }
                  },
                  "attr": {
                    "attachment": {
                      "contentType": "text/html",
                      "content": "import scala.concurrent.blocking<div><br></div><div>blocking {</div><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>// Do some blocking behavior.</div></blockquote></div><div>}</div>"
                    },
                    "style": {}
                  }
                }
              },
              "attr": {
                "style": {},
                "collapsed": true
              }
            }
          },
          "attr": {
            "style": {},
            "collapsed": true
          }
        },
        "4": {
          "title": "Avoid premature optimization.",
          "id": 141,
          "ideas": {
            "1": {
              "title": "Do not parallelize with routers until performance hot spots have been measured.",
              "id": 142
            },
            "2": {
              "title": "Start by modelling interactions as simply as possible.",
              "id": 143,
              "ideas": {
                "1": {
                  "title": "Don't think in terms of async.",
                  "id": 144
                },
                "2": {
                  "title": "Direct the flow toward the result.",
                  "id": 145
                }
              }
            },
            "3": {
              "title": "Follow Jonas Boner's roadmap.",
              "id": 146,
              "ideas": {
                "1": {
                  "title": "Deterministic",
                  "id": 147,
                  "ideas": {
                    "1": {
                      "title": "Think in terms of the app being synchronous.",
                      "id": 148
                    },
                    "2": {
                      "title": "Only after that worry about non-deterministic behavior.",
                      "id": 149
                    }
                  },
                  "attr": {
                    "collapsed": true,
                    "style": {}
                  }
                },
                "2": {
                  "title": "Declarative",
                  "id": 150,
                  "ideas": {
                    "1": {
                      "title": "Avoid imperative programming constructs.",
                      "id": 151,
                      "ideas": {}
                    },
                    "2": {
                      "title": "Better readability",
                      "id": 153
                    },
                    "3": {
                      "title": "Higher abstraction level, more wiggle room for the future.",
                      "id": 154
                    }
                  },
                  "attr": {
                    "collapsed": true,
                    "style": {}
                  }
                },
                "3": {
                  "title": "Immutable",
                  "id": 155,
                  "ideas": {
                    "1": {
                      "title": "Makes multithreading safe.",
                      "id": 157
                    }
                  },
                  "attr": {
                    "collapsed": true,
                    "style": {}
                  }
                },
                "4": {
                  "title": "Functional",
                  "id": 158,
                  "ideas": {
                    "1": {
                      "title": "Immutable",
                      "id": 159
                    },
                    "2": {
                      "title": "Referentially transparent",
                      "id": 160,
                      "ideas": {
                        "1": {
                          "title": "LSP -  you can substitute a value for a block of code without side effects taking place.",
                          "id": 162
                        }
                      }
                    },
                    "3": {
                      "title": "Having first-class functions",
                      "id": 161
                    }
                  },
                  "attr": {
                    "collapsed": true,
                    "style": {}
                  }
                }
              },
              "attr": {
                "collapsed": true,
                "style": {}
              }
            },
            "4": {
              "title": "Layer in complexity via indeterminism.",
              "id": 163,
              "ideas": {
                "1": {
                  "title": "Attack the performance problems in specific locations that required boosting.",
                  "id": 165,
                  "ideas": {
                    "1": {
                      "title": "blocking I/O",
                      "id": 166
                    },
                    "2": {
                      "title": "critical sections that can't handle the load",
                      "id": 167
                    }
                  }
                },
                "2": {
                  "title": "Start layering in asynchrony through the Extra pattern only in those spots.",
                  "id": 168
                }
              },
              "attr": {
                "collapsed": true,
                "style": {}
              }
            },
            "5": {
              "title": "Optimize with mutability.",
              "id": 169,
              "ideas": {
                "1": {
                  "title": "Applicable if you have long-lived objects.",
                  "id": 170,
                  "ideas": {
                    "1": {
                      "title": "Lifespna long enough for them to be pushed into OldGen GC region.",
                      "id": 171
                    }
                  }
                },
                "2": {
                  "title": "Avoid locks if possible.",
                  "id": 172,
                  "ideas": {
                    "1": {
                      "title": "Using locks may cause deadlocking or livelocking.",
                      "id": 177
                    },
                    "2": {
                      "title": "Mutexes are expensive to create.",
                      "id": 178
                    }
                  }
                },
                "3": {
                  "title": "Use Compare and  Swap",
                  "id": 173,
                  "ideas": {
                    "1": {
                      "title": "This is achieved through Java's Atomic References.",
                      "id": 174
                    },
                    "2": {
                      "title": "To compose Atomic References, use Scala's Software Transactional Memory\nhttp://nbronson.github.io/scala-stm/\n",
                      "id": 175
                    }
                  }
                }
              },
              "attr": {
                "collapsed": true,
                "style": {}
              }
            },
            "6": {
              "title": "Prepare for race conditions.",
              "id": 179,
              "ideas": {
                "1": {
                  "title": "Avoid coding in a way where timing matters.",
                  "id": 180,
                  "ideas": {
                    "1": {
                      "title": "Resilient systems continue to do things until the world around them changes to the way they expect it to be.",
                      "id": 181,
                      "ideas": {
                        "1": {
                          "title": "Failure is escalated to higher-level supervisors to recognize that the world needs to be pushed in a particular direction.",
                          "id": 182
                        }
                      }
                    },
                    "2": {
                      "title": "This goes hand in hand with DDD messaging.",
                      "id": 183
                    },
                    "3": {
                      "title": "READ UP\nThere are some patterns related to this paradigm.\nhttp://www.slideshare.net/shinolajla/real-world-akka-recepies-v3\n",
                      "id": 184,
                      "attr": {
                        "style": {
                          "background": "#ff0000"
                        }
                      }
                    }
                  },
                  "attr": {
                    "collapsed": true,
                    "style": {}
                  }
                },
                "2": {
                  "title": "Tell, don't Ask.",
                  "id": 185,
                  "ideas": {
                    "1": {
                      "title": "Use fire & forget messages and be prepared to handle responses.",
                      "id": 187
                    }
                  },
                  "attr": {
                    "collapsed": true,
                    "style": {}
                  }
                },
                "3": {
                  "title": "Name Actors and ActorSystem instances.",
                  "id": 188,
                  "ideas": {
                    "1": {
                      "title": "Give unique names.",
                      "id": 189,
                      "ideas": {
                        "1": {
                          "title": "Enables creating and updating external configuration.",
                          "id": 190
                        },
                        "2": {
                          "title": "Makes actor lookup by name possible.",
                          "id": 191,
                          "attr": {
                            "attachment": {
                              "contentType": "text/html",
                              "content": "<div>// Create a named actor.</div>val myActor = context.actorOf(Props[MyActor], \"my-actor\")<div><br></div><div>// Somewhere else, look the actor up.<br><div>val myActor = context.system.actorFor(\"my-actor\")</div></div>"
                            },
                            "style": {}
                          },
                          "ideas": {
                            "1": {
                              "title": "actorFor is deprecated due to differences between local and remote",
                              "id": 192
                            },
                            "2": {
                              "title": "use actorSelection instead\nhttp://bit.ly/17cudgQ\n",
                              "id": 193
                            }
                          }
                        }
                      },
                      "attr": {
                        "collapsed": true,
                        "style": {}
                      }
                    }
                  }
                },
                "4": {
                  "title": "Create specialized messages.",
                  "id": 195,
                  "ideas": {
                    "1": {
                      "title": "Do not pass generic messages around.",
                      "id": 196,
                      "attr": {
                        "attachment": {
                          "contentType": "text/html",
                          "content": "// Bad - many actors will have to determine whether this message is relevant to them.<div>case object AccountsUpdated</div><div><br></div><div>// Good - only the CustomerActor related to given customer is notified of the change.</div><div>case class AccountUpdated(customerId: Long, accountId: Long)</div>"
                        },
                        "style": {}
                      }
                    },
                    "2": {
                      "title": "They should flow through the supervisor hierarchy in a direct fashion to the Actor best equipped to handle it.",
                      "id": 197,
                      "ideas": {
                        "1": {
                          "title": "Avoid intermediaries.",
                          "id": 198
                        }
                      }
                    }
                  },
                  "attr": {
                    "collapsed": true,
                    "style": {}
                  }
                },
                "5": {
                  "title": "Create specialized exceptions.",
                  "id": 199,
                  "ideas": {
                    "1": {
                      "title": "Using generalized exceptions will cause large swathes of Actors to be restarted in case of failures.",
                      "id": 201
                    },
                    "2": {
                      "title": "Default supervisor failure handling strategy is to restart every Actor below.",
                      "id": 202,
                      "attr": {
                        "attachment": {
                          "contentType": "text/html",
                          "content": "class MySupervisor extends Actor {<div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>// It's the same as the default behavior, but it's good practice to override it anyhow, just to be explicit</div><div>// and remember that this will be prone to change in the future.</div></blockquote><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>override val supervisorStrategy = OneForOneStrategy() {</div></blockquote></div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>case _: Exception =&gt; Restart</div></blockquote>}<br></div><div><br></div><div>/* ... */</div><div><br></div></blockquote><div><div>}</div></div></div>"
                        },
                        "style": {},
                        "collapsed": true
                      },
                      "ideas": {
                        "1": {
                          "title": "If there is no handler all the way to the hierarchy root, everything will get restarted.",
                          "id": 203,
                          "ideas": {
                            "1": {
                              "title": "This is OK for a catastrophic application failure, but that's pretty much it.",
                              "id": 204
                            }
                          }
                        },
                        "2": {
                          "title": "By default, Akka will stop a child actor on ActorInitializationEx\nception and ActorKilledException . Akka will restart a child actor\non Exception , and all other types will be escalated to the parent actor.",
                          "id": 207
                        }
                      }
                    },
                    "3": {
                      "title": "Make sure the appropriate supervisor ends up handling specific exception types.",
                      "id": 208,
                      "attr": {
                        "attachment": {
                          "contentType": "text/html",
                          "content": "class MySupervisor extends Actor {<div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>override val supervisorStrategy = OneForOneStrategy() {</div></blockquote></div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><div>case _: SQLException =&gt; Resume &nbsp; &nbsp;// Probably bad data in the message, can safely continue working.</div></div></blockquote></blockquote><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>case _: MyDbConnectionException =&gt; Escalate &nbsp; &nbsp;// Something is seriously wrong with the DB connection.</div></blockquote></div></blockquote><div><blockquote style=\"margin: 0 0 0 40px; border: none; padding: 0px;\"><div>}</div><div><br></div><div>/* ... */</div></blockquote><div>}</div></div>"
                        },
                        "style": {},
                        "collapsed": true
                      },
                      "ideas": {
                        "1": {
                          "title": "The MyDbConnection failure might be e.g. just an authentication issue.",
                          "id": 209,
                          "ideas": {
                            "1": {
                              "title": "Nevertheless, it can be now escalated to the supervisor that can decide whether it's an isolated failure or a part of a larger problem.",
                              "id": 210,
                              "ideas": {
                                "1": {
                                  "title": "In case of larger issues, all actors relying on the faulty connection can be stopped until a new one can be established.",
                                  "id": 211
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "links": []
}